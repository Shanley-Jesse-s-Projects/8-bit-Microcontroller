// ============================================================================
//   Ver  :| Authors					:| Mod. Date :| Changes Made:
//   V1.1 :| Jesse Rosart-Brodnitz, Shanley Mullen	:| 11/15/2018:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	//inout 		    [15:0]		ARDUINO_IO,
	input 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



assign LEDR[9] = ARDUINO_IO[2];
//assign LEDR[6] = ARDUINO_IO[3];
//assign LEDR[5] = ARDUINO_IO[4];
//assign LEDR[4] = ARDUINO_IO[5];
//assign LEDR[3] = ARDUINO_IO[6];
//assign LEDR[2] = ARDUINO_IO[7];
//assign LEDR[1] = ARDUINO_IO[8];
//assign LEDR[0] = ARDUINO_IO[9];
wire [7:0] ALUout;
wire [7:0] Q;
wire x, y;
wire [7:0] operand;
assign operand [7:4] = 0;
assign operand [3:0] = ARDUINO_IO[6:3];



//need to call main function here. This could be thought of like bigmoodflop flip here
ALU(ALUout, LEDR[8], Q, operand[7:0], ARDUINO_IO[9:7]);
accumulator millionDreams(Q, ALUout, ARDUINO_IO[2]);		//changed Q to LEDR
countThis(HEX0[6:0], Q);
//assign LEDR[7:0] = Q[7:0];

endmodule

module ALU(ALUout, Zerocheck, ACC, B, ALUopcode);	//ACC=accumulator, B=input bits for operand2
	output reg [7:0] ALUout;
	output Zerocheck;
	input [7:0] ACC;
	input [7:0] B;
	input [2:0] ALUopcode;
	
	//assign LEDR = Zerocheck;
	assign Zerocheck = (ALUout==0);
	
	always @(ALUopcode, ACC, B) begin
		case (ALUopcode)
			0:ALUout <=ACC+B;
			1:ALUout <=ACC-B;
			2:ALUout <=ACC & B;
			6:ALUout <=ACC | B;
			7:ALUout <=ACC<B?1:0;
			default: ALUout <= 0;
		endcase
	end
endmodule	

//module ALUopcodeControl(ALUOpcode, ALUop, Func);
	//output reg [1:0] ALUop;
	//input [3:0] ALUOpcode;
	//input [5:0] Func;
	//always case (Func)
			//32: ALUop<=2;
			//34: ALUop<=6;
			//36: ALUop<=0;
			//37: ALUop<=1;
			//42: ALUop<=7;
			//default: ALUop<=15;
		//endcase
//endmodule

module accumulator(Q, D, CLK);		
	output[7:0] Q;
	input[7:0] D;
	input CLK;
	
	
	myDFF f0(Q[0], D[0], CLK);
	myDFF f1(Q[1], D[1], CLK); 
	myDFF f2(Q[2], D[2], CLK); 
	myDFF f3(Q[3], D[3], CLK); 
	myDFF f4(Q[4], D[4], CLK); 
	myDFF f5(Q[5], D[5], CLK);
	myDFF f6(Q[6], D[6], CLK); 
	myDFF f7(Q[7], D[7], CLK);
	
	 
	// ALU(ALUout, Zerocheck, Q, B, ALUopcode);
	 
endmodule
	
module myDFF(Q,D,CLK);
	output Q;
	input D, CLK;
	reg Q;
	always @(posedge CLK)
		Q=D;
endmodule

module countThis(HEX, Q);
	output [6:0] HEX;
	input [3:0] Q;
	
		assign HEX[0] = (Q[0]&~Q[1]&~Q[2]&~Q[3]) | (~Q[0]&~Q[1]&Q[2]&~Q[3]) | (Q[0]&~Q[1]&Q[2]&Q[3]) | (Q[0]&Q[1]&~Q[2]&Q[3]);
		assign HEX[1] = (Q[0]&Q[1]&Q[3]) | (~Q[0]&Q[1]&Q[2]) | (~Q[0]&Q[2]&Q[3]) | (Q[0]&~Q[1]&Q[2]&~Q[3]);
		assign HEX[2] = (Q[1]&Q[2]&Q[3]) | (~Q[0]&Q[2]&Q[3]) | (~Q[0]&Q[1]&~Q[2]&~Q[3]);
		assign HEX[3] = (Q[0]&Q[1]&Q[2]) | (Q[0]&~Q[1]&~Q[2]) | (~Q[0]&~Q[1]&Q[2]&~Q[3]) | (Q[3]&~Q[2]&Q[1]&~Q[0]);
		assign HEX[4] = (~Q[3]&Q[0]) | (~Q[1]&~Q[2]&Q[0]) | (~Q[3]&~Q[1]&Q[2]);
		assign HEX[5] = (Q[0]&~Q[2]&~Q[3]) | (~Q[3]&~Q[2]&Q[1]) | (Q[0]&Q[2]&~Q[1]&Q[3]);
		assign HEX[6] = (~Q[3]&~Q[1]&~Q[2]) | (~Q[3]&Q[1]&Q[2]&Q[0]) | (Q[3]&Q[2]&~Q[1]&~Q[0]);
		

endmodule	
